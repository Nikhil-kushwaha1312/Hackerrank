import math
import os
import random
import re
import sys

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5)+1):
        if n % i == 0:
            return False
    return True

def generate_primes(q):
    primes = []
    num = 2
    while len(primes) < q:
        if is_prime(num):
            primes.append(num)
        num += 1
    return primes

def waiter(number, q):
    primes = generate_primes(q)
    A = number  # we will simulate stack behavior manually
    result = []

    for i in range(q):
        B = []
        next_A = []

        # Traverse from top of stack A (right to left)
        while A:
            plate = A.pop()
            if plate % primes[i] == 0:
                B.append(plate)
            else:
                next_A.append(plate)

        # Append B stack from top to bottom (LIFO)
        while B:
            result.append(B.pop())

        A = next_A

    # After all iterations, append remaining A stack from top to bottom
    while A:
        result.append(A.pop())

    return result


if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = int(first_multiple_input[0])

    q = int(first_multiple_input[1])

    number = list(map(int, input().rstrip().split()))

    result = waiter(number, q)

    fptr.write('\n'.join(map(str, result)))
    fptr.write('\n')

    fptr.close()
